version: "3"
services:
  qbittorrent:
    image: 'markusmcnugen/qbittorrentvpn:latest'
    container_name: qbittorrentvpn
    privileged: true 
    environment:
      - VPN_USERNAME=${VPN_USERNAME}
      - VPN_PASSWORD=${VPN_PASSWORD}
      - PUID=${PUID}
      - PGID=${PGID}
      - VPN_ENABLED=yes
      - LAN_NETWORK=${LAN_NETWORK}
      - NAME_SERVERS=8.8.8.8,8.8.4.4
    volumes:
      - ${config}/qbittorrent:/config
      - ${downloads}:/downloads
    ports:
      - 8080:8080
      - 8999:8999
      - 8999:8999/udp
    restart: unless-stopped

  jackett:
    image: 'dyonr/jackettvpn:latest'
    container_name: jackett
    privileged: true
    environment:
      - VPN_ENABLED=YES
      - VPN_TYPE=openvpn
      - VPN_USERNAME=${VPN_USERNAME}
      - VPN_PASSWORD=${VPN_PASSWORD}
      - WEBUI_PASSWORD=admin
      - LAN_NETWORK=${LAN_NETWORK}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${config}/jacket:/config
    ports:
      - 9117:9117
    restart: unless-stopped
  
  radarr:
    image: 'linuxserver/radarr:latest'
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${config}/radarr:/config
      - ${movies}:/movies
      - ${downloads}:/downloads
    ports:
      - 7878:7878
    restart: unless-stopped

  sonarr:
    image: 'linuxserver/sonarr:latest'
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${config}/sonarr:/config
      - ${tv}:/tv
      - ${downloads}:/downloads
    ports:
      - 8989:8989
    restart: unless-stopped

  bazarr:
    image: 'linuxserver/bazarr'
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${config}/sonarr:/config
      - ${tv}:/tv
      - ${movies}:/movies
    ports:
      - 6767:6767
    restart: unless-stopped

  organizr:
    container_name: organizr
    hostname: organizr
    image: 'organizr/organizr:latest'
    ports:
      - 80:80
    volumes:
      - ${config}/organizr:/config
    environment:
      - fpm=true #true or false | using true will provide better performance
      - branch=v2-master #v2-master or #v2-develop
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: unless-stopped

  wireshark:
    image: 'linuxserver/wireshark:latest'
    container_name: wireshark
    cap_add:
      - NET_ADMIN
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${config}/wireshark:/config
    restart: unless-stopped

  code-server:
    image: 'linuxserver/code-server:latest'
    container_name: code-server
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DEFAULT_WORKSPACE=/config/workspace #optional
    volumes:
      - ${config}/code-server:/config
    ports:
      - 8443:8443
    restart: unless-stopped

  prometheus:
    image: 'prom/prometheus:latest'
    container_name: prometheus
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    volumes:
      - ${config}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped

  node-exporter:
    image: 'quay.io/prometheus/node-exporter:latest'
    container_name: node-exporter
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    volumes:
      - /:/host:ro,rslave
    ports:
      - 9292:9090
    restart: unless-stopped
    
  grafana:
    image: 'grafana/grafana:latest'
    container_name: grafana
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    ports:
      - 3030:3000
    restart: unless-stopped

  node-red:
    image: 'nodered/node-red:latest'
    container_name: node-red
    network_mode: host
    ports:
      - 1880:1880
    volumes:
      - ${config}/nodered:/data
    restart: unless-stopped

  mqtt:
    image: 'eclipse-mosquitto:latest'
    container_name: mosquitto
    network_mode: host
    ports:
      - 1883:1883
      - 9001:9001
    volumes:
      - ${config}/mqtt/config:/mosquitto/config
      - ${config}/mqtt/data:/mosquitto/data 
      - ${config}/mqtt/log:/mosquitto/log
    restart: unless-stopped

  watchtower:
    image: 'containerrr/watchtower:latest'
    container_name: watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  pihole:
    image: 'pihole/pihole:latest'
    container_name: pihole
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      - 80:80/tcp
    environment:
      - PIHOLE_DNS_ = 127.0.0.1, 1.1.1.1
      - TZ = ${TZ}
      - ServerIP = ${PI_HOLE_IP}
    volumes:
      - ./etc-pihole/:/etc/pihole/
      - ./etc-dnsmasq.d/:/etc/dnsmasq.d/
    cap_add:
     - NET_ADMIN
    networks:
      macvlan_network:
        ipv4_address: ${PI_HOLE_IP}
    restart: unless-stopped

  homeassistant:
    image: 'ghcr.io/home-assistant/home-assistant:stable'
    container_name: homeassistant
    privileged: true
    networks: host
    ports:
      - 8123:8123
    environment:
      - TZ=${TZ}
    volumes:
      - ${config}/homeassistant:/config
    restart: unless-stopped

  portainer:
    image: 'portainer/portainer-ce'
    container_name: portainer
    privileged: true
    ports:
      - 9000:9000
      - 8000:8000
      - 9443:9443
    volumes:
      - /var/lib/docker/volumes:/var/lib/docker/volumes 
      - /var/run/docker.sock:/var/run/docker.sock 
    restart: unless-stopped

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    ports:
      - 8888:8888
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  speedtest:
    image: 'henrywhitaker3/speedtest-tracker'
    container_name: speedtest
    restart: unless-stopped
    ports:
      - 8765:80
    environment:
      - TZ=${TZ}
      - PGID=${PGID}
      - PUID=${PUID}
      - OOKLA_EULA_GDPR=true
    volumes:
      - ${config}/speedtest:/config 

  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    network_mode: host
    runtime: nvidia
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - VERSION=docker
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - 32400:32400
    volumes:
      - ${config}:/config
      - ${tv}:/tv
      - ${movies}:/movies
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped

networks:
  dockervlan:
    name: dockervlan
    driver: macvlan
    driver_opts:
      parent: ${NETWORK_DRIVER}
    ipam:
      config:
        - subnet: ${LAN_NETWORK}
          ip_range: ${DOCKERNETWORK_IP_ADDRESS}
          #ip range from .10 to .42 
          gateway: ${DOCKERNETWORK_IP_RANGE}